() => {
  /**
Iteration	T	K in K extends K	X<T, K>	[K, ...P<X<T, K>>]	Result
1	   1 | 2 | 3	1	2 | 3	[1, ...P<2 | 3>]	
1.1	   2 | 3	2	3	[1, 2, ...P<3>]	
1.1.1	   3	3	never	[1, 2, 3, ...[]]	[1, 2, 3]
1.2	   2 | 3	3	2	[1, 3, ...P<2>]	
1.2.1	   2	2	never	[1, 3, 2, ...[]]	[1, 3, 2]
2	   1 | 2 | 3	2	1 | 3	[2, ...P<1 | 3>]	
2.1	   1 | 3	1	3	[2, 1, ...P<3>]	
2.1.1	   3	3	never	[2, 1, 3, ...[]]	[2, 1, 3]
2.2	   1 | 3	3	1	[2, 3, ...P<1>]	
2.2.1	   1	1	never	[2, 3, 1, ...[]]	[2, 3, 1]
3	   1 | 2 | 3	3	1 | 2	[3, ...P<1 | 2>]	
3.1	   1 | 2	1	2	[3, 1, ...P<2>]	
3.1.1	   2	2	never	[3, 1, 2, ...[]]	[3, 1, 2]
3.2	   1 | 2	2	1	[3, 2, ...P<1>]	
3.2.1	1	1	never	[3, 2, 1, ...[]]	[3, 2, 1]

     */
  type Permutation<T, K = T> = [T] extends [never]
    ? []
    : K extends K
    ? [K, ...Permutation<Exclude<T, K>>]
    : never;

  type Permuted = Permutation<"a" | "b">; // ['a', 'b'] | ['b' | 'a']
};
